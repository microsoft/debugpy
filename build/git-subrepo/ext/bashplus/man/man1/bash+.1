.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bash+(1) 1"
.TH Bash+(1) 1 "January 2016" "Generated by Swim v0.1.41" "Modern Bash Programming"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Bash+(1) \- Modern Bash Programming
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&    source bash+ :std :array
\&
\&    use Foo::Bar this that
\&
\&    Array.new args "$@"
\&
\&    if args.empty?; then
\&      die "I need args!"
\&    fi
\&
\&    Foo::Bar.new foo args
\&
\&    this is awesome     # <= this is a real command! (You just imported it)
.Ve
.SH "Description"
.IX Header "Description"
Bash+ is just Bash... \fBplus\fR some libraries that can make Bash programming a lot nicer.
.PP
Get the source code from GitHub:
.PP
.Vb 1
\&    git clone git@github.com:ingydotnet/bashplus
.Ve
.PP
Then run:
.PP
.Vb 2
\&    make test
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.SH "Usage"
.IX Header "Usage"
For now look at some libraries the use Bash+:
.IP "\(bu" 4
<https://github.com/ingydotnet/git\-hub>
.IP "\(bu" 4
<https://github.com/ingydotnet/json\-bash>
.IP "\(bu" 4
<https://github.com/ingydotnet/test\-more\-bash>
.SH "Status"
.IX Header "Status"
If you are interested in chatting about this, \f(CW\*(C`/join #bpan\*(C'\fR on irc.freenode.net.
.SH "Author"
.IX Header "Author"
Written by Ingy döt Net <ingy@ingy.net>
.SH "Copyright & License"
.IX Header "Copyright & License"
Copyright 2013\-2016. Ingy döt Net.
.PP
The \s-1MIT\s0 License (\s-1MIT\s0).
